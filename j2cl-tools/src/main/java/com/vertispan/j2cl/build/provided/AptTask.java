package com.vertispan.j2cl.build.provided;

import com.google.auto.service.AutoService;
import com.vertispan.j2cl.build.task.*;

import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;

@AutoService(TaskFactory.class)
public class AptTask extends TaskFactory {
    public static final PathMatcher JAVA_SOURCES = FileSystems.getDefault().getPathMatcher("glob:**/*.java");

    @Override
    public String getOutputType() {
        return OutputTypes.GENERATED_SOURCES;
    }

    @Override
    public String getTaskName() {
        return "default";
    }

    @Override
    public Task resolve(Project project, Config config) {
        if (!project.hasSourcesMapped()) {
            // we explicitly don't copy the generated sources, they already exist in the proj sources
            return ignored -> {};
        }

        // we assume that bytecode was generated by javac, and will read the generated sources out of there
        Input myBytecode = input(project, OutputTypes.BYTECODE).filter(JAVA_SOURCES);

        return outputPath -> {
            // the BytecodeTask already did the work for us, just copy sources to output
            for (Path path : myBytecode.getFilesAndHashes().keySet()) {
                Files.createDirectories(outputPath.resolve(path).getParent());
                Files.copy(myBytecode.getPath().resolve(path), outputPath.resolve(path));
            }
        };
    }
}
